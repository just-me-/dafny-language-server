using Microsoft.Boogie;
using Microsoft.Boogie.ModelViewer;
using Microsoft.Boogie.ModelViewer.Dafny;
using System;
using System.CodeDom;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using DafnyLanguageServer.FileManager;
using DafnyLanguageServer.Handler;
using Microsoft.Dafny;

namespace DafnyLanguageServer.DafnyAccess
{
    /// <summary>
    /// The .bvd file is the so-called model file.
    /// It is generated by using the compiler argument "/mv:[pathToBVD]" in Dafny.
    /// The model file contains information about counter examples.
    /// This class reads the .bvd file and translates it to proper data structures.
    /// </summary>
    public class CounterExampleModelFileTranslator
    {
        private static readonly string assemblyPath = Path.GetDirectoryName(typeof(CounterExampleModelFileTranslator).Assembly.Location);
        public static readonly string ModelBvdDefault = Path.GetFullPath(Path.Combine(assemblyPath, "../model.bvd"));
        public string ModelBvd;

        public CounterExampleModelFileTranslator()
        {
            ModelBvd = ModelBvdDefault;
        }

        public CounterExampleModelFileTranslator(string modelFile)
        {
            ModelBvd = modelFile;
        }

        public List<ILanguageSpecificModel> TranslateModelFile()
        {
            if (!File.Exists(ModelBvd))
            {
                return new List<ILanguageSpecificModel>();
            }

            string RawBVDContent = ReadModelFile(ModelBvd);
            List<Model> models = ParseModels(RawBVDContent);
            List<ILanguageSpecificModel> specificModels = BuildModels(models);

            return specificModels;

        }


        private string ReadModelFile(string path)
        {
            using (var fs = new FileStream(path, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
            using (var sr = new StreamReader(fs, Encoding.Default))
            {
                return sr.ReadToEnd();
            }
        }

        private List<Model> ParseModels(string modelString)
        {
            return Model.ParseModels(new StringReader(modelString));
        }

        private List<ILanguageSpecificModel> BuildModels(List<Model> modellist)
        {
            var specificModels = new List<ILanguageSpecificModel>();
            foreach (var model in modellist)
            {
                var specifiedModel = Provider.Instance.GetLanguageSpecificModel(model, new ViewOptions() { DebugMode = true, ViewLevel = 3 });
                specificModels.Add(specifiedModel);
            }
            return specificModels;
        }


        public static void ClearDefaultModelFile()
        {
            if (File.Exists(ModelBvdDefault))
            {
                File.Delete(ModelBvdDefault);
            }
        }


    }

    
}
