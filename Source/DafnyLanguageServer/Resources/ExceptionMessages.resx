<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="cannot_use_itself" xml:space="preserve">
    <value>When symbol is a declaration, it cannot be a usage of itself.</value>
    <comment>Used in the visitor.</comment>
  </data>
  <data name="cannot_use_unknown_symbol" xml:space="preserve">
    <value>Can not add usage at unknown symbol.</value>
    <comment>Used in the visitor.</comment>
  </data>
  <data name="config_could_not_be_parsed" xml:space="preserve">
    <value>Error while parsing json config.</value>
  </data>
  <data name="config_file_not_found" xml:space="preserve">
    <value>Config file not found at:</value>
  </data>
  <data name="could_not_collect_models" xml:space="preserve">
    <value>Error while collecting (counter example) models.</value>
  </data>
  <data name="could_not_execute_compilation" xml:space="preserve">
    <value>Error while executing compilation.</value>
  </data>
  <data name="invalid_module_handed_to_deep_visitor" xml:space="preserve">
    <value>Invalid Module given to deep visitor as entry point.</value>
    <comment>Used in the visitor.</comment>
  </data>
  <data name="global_class_not_registered" xml:space="preserve">
    <value>Global Class Scope was not registered.</value>
    <comment>Used in the visitor.</comment>
  </data>
  <data name="missing_delcaration_origin" xml:space="preserve">
    <value>When symbol is not a declaration, its declarationOrigin must be given.</value>
    <comment>Used in the visitor.</comment>
  </data>
  <data name="negativ_line" xml:space="preserve">
    <value>Line index must not be negative.</value>
  </data>
  <data name="not_enough_lines" xml:space="preserve">
    <value>There are not enough lines in the given source.</value>
  </data>
  <data name="not_supported_launch_args" xml:space="preserve">
    <value>Error parsing launch arguments. Please refer to the readme.md</value>
  </data>
  <data name="stream_and_log_are_same" xml:space="preserve">
    <value>StreamRedirection and Log must not be the same files.</value>
  </data>
  <data name="unexpected_file_type" xml:space="preserve">
    <value>Expected string or TextDocumentChangeEvent-Container at text-document-change event request.</value>
    <comment>Used in the WorkspaceManager, UpdateFile(). </comment>
  </data>
  <data name="visit_only_declarations" xml:space="preserve">
    <value>This visitor must only visit declarations.</value>
    <comment>Used in the visitor. </comment>
  </data>
  <data name="completion_not_yet_supported" xml:space="preserve">
    <value>This auto completion desire is not yet supported.</value>
  </data>
  <data name="counter_example_no_init_state" xml:space="preserve">
    <value>Specific model does not contain a [ :initial state ].</value>
  </data>
  <data name="DTU_no_physical_file_given" xml:space="preserve">
    <value>Internal Error constructing DTU: PhysicalFile must not be null.</value>
  </data>
  <data name="DTU_only_use_once" xml:space="preserve">
    <value>A DafnyTranslationUnit can only be used once. Create a new one!</value>
  </data>
  <data name="file_cursor_exceed_line_width" xml:space="preserve">
    <value>Cursor position is exceeding line width.</value>
  </data>
  <data name="invalid_filter_operation" xml:space="preserve">
    <value>Invalid Filter Operation - no results were found but at least one was expected.</value>
  </data>
  <data name="loglevel_illegal" xml:space="preserve">
    <value>LogLevel exceeds limits. Must be between 0 and 6. Setting to default LogLevel 4 = Error.</value>
  </data>
  <data name="no_arg_for_switch" xml:space="preserve">
    <value>No Argument provided for switch </value>
  </data>
  <data name="unknown_switch" xml:space="preserve">
    <value>Unknown switch: '{0}'. Please refer to readme.md</value>
    <comment>For Config Init</comment>
  </data>
  <data name="tmp_invalid_class_path" xml:space="preserve">
    <value>Invalid class path... expected Module.Class pattern.</value>
  </data>
  <data name="file_repo_must_have_physical" xml:space="preserve">
    <value>A Filerepository must habe a Physical File but it wasn't the case.</value>
  </data>
  <data name="token_requires" xml:space="preserve">
    <value>Every Symbol must have a token.</value>
  </data>
  <data name="symbol_entrypoint_must_be_set" xml:space="preserve">
    <value>A Symbol Entrypoint must be set for navigator methods. It must not be null.</value>
  </data>
</root>